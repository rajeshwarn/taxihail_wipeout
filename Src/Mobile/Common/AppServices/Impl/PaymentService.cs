        readonly IConfigurationManager _configurationManager;
        readonly string _baseUrl;
        readonly string _sessionId;
        readonly ICacheService _cache;        private const string PayedCacheSuffix = "_Payed";
        readonly ILogger _logger;        public PaymentService(string url, string sessionId, IConfigurationManager configurationManager, ICacheService cache, ILogger logger)        {            _logger = logger;            _baseUrl = url;            _sessionId = sessionId;            _cache = cache;            _configurationManager = configurationManager;        }        public double? GetPaymentFromCache(Guid orderId)        {            var result = _cache.Get<string>(orderId + PayedCacheSuffix);            double amount;            if (double.TryParse(result, out amount))            {                return amount;            }            return null;        }        public void SetPaymentFromCache(Guid orderId, double amount)        {            _cache.Set(orderId + PayedCacheSuffix, amount.ToString(CultureInfo.InvariantCulture));                    }        public IPaymentServiceClient GetClient()        {            const string onErrorMessage = "Payment Method not found or unknown";            var settings = _configurationManager.GetPaymentSettings();            switch (settings.PaymentMode)            {                case PaymentMethod.Braintree:                    return new BraintreeServiceClient(_baseUrl, _sessionId, settings.BraintreeClientSettings.ClientKey, TinyIoCContainer.Current.Resolve<IPackageInfo>().UserAgent);								case PaymentMethod.RideLinqCmt:                case PaymentMethod.Cmt:                    return new CmtPaymentClient(_baseUrl, _sessionId, settings.CmtPaymentSettings, _logger, TinyIoCContainer.Current.Resolve<IPackageInfo>().UserAgent);                case PaymentMethod.Fake:                    return new FakePaymentClient();                default:                    throw new Exception(onErrorMessage);            }        }        public void ResendConfirmationToDriver(Guid orderId)        {            GetClient().ResendConfirmationToDriver(orderId);        }        public TokenizedCreditCardResponse Tokenize(string creditCardNumber, DateTime expiryDate, string cvv)        {            return GetClient().Tokenize(creditCardNumber, expiryDate, cvv);        }        public DeleteTokenizedCreditcardResponse ForgetTokenizedCard(string cardToken)        {            return GetClient().ForgetTokenizedCard(cardToken);        }        public PreAuthorizePaymentResponse PreAuthorize(string cardToken, double amount, double meterAmount, double tipAmount, Guid orderId)        {            return GetClient().PreAuthorize(cardToken, amount, meterAmount, tipAmount, orderId);        }        public CommitPreauthorizedPaymentResponse CommitPreAuthorized(string transactionId)        {            return GetClient().CommitPreAuthorized(transactionId);        }        public CommitPreauthorizedPaymentResponse PreAuthorizeAndCommit(string cardToken, double amount, double meterAmount, double tipAmount, Guid orderId)        {            return GetClient().PreAuthorizeAndCommit(cardToken, amount, meterAmount, tipAmount, orderId);        }        public PairingResponse Pair(Guid orderId, string cardToken, int? autoTipPercentage, double? autoTipAmount)        {            return GetClient().Pair(orderId, cardToken, autoTipPercentage, autoTipAmount);        }        public BasePaymentResponse Unpair(Guid orderId)        {            return GetClient().Unpair(orderId);        }    }}
            // TODO: Debug exclusively for RideLinqCmt
#if DEBUG
            settings.PaymentMode = PaymentMethod.RideLinqCmt;
#endif