--- Src/Mobile/Common/ViewModels/BookingStatusViewModel.cs	
+++ Src/Mobile/Common/ViewModels/BookingStatusViewModel.cs	
@@ -21,39 +21,41 @@
 using apcurium.MK.Common.Diagnostic;
 using apcurium.MK.Common.Entity;
 using apcurium.MK.Common.Extensions;
 using System.Reactive.Disposables;
 using apcurium.MK.Booking.Mobile.Extensions;
 using System.Threading.Tasks;
 using apcurium.MK.Common;
 using Cirrious.MvvmCross.Interfaces.ViewModels;
 using apcurium.MK.Common.Configuration.Impl;
 using System.Threading;
 
 namespace apcurium.MK.Booking.Mobile.ViewModels
-{
-	public class BookingStatusViewModel : BaseViewModel, IMvxServiceConsumer<IBookingService>
+{
+    public class BookingStatusViewModel : BaseViewModel, IMvxServiceConsumer<IBookingService>, IMvxServiceConsumer<IPaymentService>
     {
-		private readonly IBookingService _bookingService;
+		private readonly IBookingService _bookingService;
+        private readonly IPaymentService _paymentService;
         private int _refreshPeriod = 5; //in seconds
         private bool _waitingToNavigateAfterTimeOut = false;
 
 		public BookingStatusViewModel (string order, string orderStatus)
 		{
 			Order = JsonSerializer.DeserializeFromString<Order> (order);
 			OrderStatusDetail = JsonSerializer.DeserializeFromString<OrderStatusDetail> (orderStatus);      
             IsCancelButtonVisible = true;			
-            IsPairing = false;
+            IsCurrentlyPairing = false;
             _waitingToNavigateAfterTimeOut = false;
-			_bookingService = this.GetService<IBookingService>();
+			_bookingService = this.GetService<IBookingService>();
+            _paymentService = this.GetService<IPaymentService>();
 		}
 	
 		public override void Load ()
         {
 			base.Load ();
 
 			StatusInfoText = Str.GetStatusInfoText(Str.LoadingMessage);
 
             Pickup = new BookAddressViewModel (() => Order.PickupAddress, address => Order.PickupAddress = address)
             {
 				EmptyAddressPlaceholder = Str.BookPickupLocationEmptyPlaceholder
             };
@@ -324,28 +326,29 @@
                     {
 						this.PhoneService.AddEventToCalendarAndReminder(Str.ReminderTitle, 
 						                                                Str.GetReminderDetails(Order.PickupAddress.FullAddress, Order.PickupDate),						              									 
                                                                         Order.PickupAddress.FullAddress, 
                                                                         Order.PickupDate, 
                                                                         Order.PickupDate.AddHours(-2));
                     }, Str.NoButtonText, () => { });
                 });
             }
         }
 		        
 		string vehicleNumber = null;
-        private bool IsPairing = false;
+        private bool IsCurrentlyPairing = false;
         private void RefreshStatus ()
         {
-            try {
+            try {
+                var setting = ConfigurationManager.GetPaymentSettings();            
                 var status = BookingService.GetOrderStatus (Order.Id);
 				if(status.VehicleNumber != null)
 				{
 					vehicleNumber = status.VehicleNumber;
 				}
 				else{
 					status.VehicleNumber = vehicleNumber;
 				}
 
 				var isDone = BookingService.IsStatusDone (status.IBSStatusId);
 
                 if(status.IBSStatusId.HasValue() && status.IBSStatusId.Equals(VehicleStatuses.Common.Scheduled) )
@@ -354,33 +357,35 @@
 				}
 
 #if DEBUG
                 //status.IBSStatusId = VehicleStatuses.Common.Arrived;
 #endif                                
                 IsPayButtonVisible = false;
                 if (status != null) {
                     StatusInfoText = status.IBSStatusDescription;                        
                     this.OrderStatusDetail = status;
 
                     CenterMap ();
 
-                    // TODO: Put the good timing / condition for Pair navigation
-
                     var isLoaded = status.IBSStatusId.Equals(VehicleStatuses.Common.Loaded) || status.IBSStatusId.Equals(VehicleStatuses.Common.Done);
-                    var isPaired = _bookingService.IsPaired(Order.Id) == true ? true : false;
-                    
-                    if (isLoaded && !isPaired && !IsPairing)
+                    var isPaired = (_bookingService.IsPaired(Order.Id) == true) ? true : false;
+                    var pairState = CacheService.Get<string>("CmtRideLinqPairState" + Order.Id.ToString());
+                    var isPairBypass = (pairState == "failed") || (pairState == "canceled") || (pairState == "unpaired");
+                    var IsCmtRideLinqEnabled = (setting.PaymentMode == PaymentMethod.RideLinqCmt);
+
+                    if (isLoaded && !isPaired && !IsCurrentlyPairing && !isPairBypass)
                     {
-                        IsPairing = true;
-                        GoToCmtPairScreen();                        
+                        IsCurrentlyPairing = true;
+                        GoToCmtPairScreen();
+                        return;
                     }
                     
                     UpdatePayCancelButtons(status.IBSStatusId);
 
                     if (OrderStatusDetail.IBSOrderId.HasValue) {
 						ConfirmationNoTxt = Str.GetStatusDescription(OrderStatusDetail.IBSOrderId.Value+"");
                     }
                     
                     if (isDone) 
 					{
 						GoToSummary();
                     }
@@ -388,61 +393,56 @@
                     if (BookingService.IsStatusTimedOut (status.IBSStatusId))
                     {
                         GoToBookingScreen();
                     }
                 }
             } catch (Exception ex) {
                 Logger.LogError (ex);
             }
         }
 
 		void UpdatePayCancelButtons (string statusId)
 		{
-            var setting = ConfigurationManager.GetPaymentSettings ();
-            var isPayEnabled = setting.IsPayInTaxiEnabled || setting.PayPalClientSettings.IsEnabled;
-
-            //bool IsCmtRideLinqEnabled = setting.PaymentMode == PaymentMethod.RideLinqCmt;
-            bool IsCmtRideLinqEnabled = true;
+            var setting = ConfigurationManager.GetPaymentSettings ();
+            var isCmtRideLinqEnabled = setting.PaymentMode == PaymentMethod.RideLinqCmt;            
+            var isPayEnabled = setting.IsPayInTaxiEnabled || setting.PayPalClientSettings.IsEnabled || isCmtRideLinqEnabled; // TODO: Is this RideLinq condition OK for production?
+            var isPaired = _bookingService.IsPaired(Order.Id) == true ? true : false;
+            
+            IsUnpairButtonVisible = isCmtRideLinqEnabled && isPaired;
 
-            //var isPaired = _bookingService.IsPaired(Order.Id) == true ? true : false;
-            var isPaired = false;
-          
-            IsUnpairButtonVisible = IsCmtRideLinqEnabled && isPaired;
-
-			IsPayButtonVisible =  (statusId == VehicleStatuses.Common.Done
-								||statusId == VehicleStatuses.Common.Loaded) 
-                                && (isPayEnabled && !PaymentService.GetPaymentFromCache(Order.Id).HasValue)
-                                && (!IsCmtRideLinqEnabled);
+            IsPayButtonVisible = (statusId == VehicleStatuses.Common.Done
+                                || statusId == VehicleStatuses.Common.Loaded)
+                                && (isPayEnabled && !PaymentService.GetPaymentFromCache(Order.Id).HasValue) && !isPaired;
 			
             IsCancelButtonVisible = statusId == null ||
                                     statusId == VehicleStatuses.Common.Assigned 
                                 || statusId == VehicleStatuses.Common.Waiting 
                                 || statusId == VehicleStatuses.Common.Arrived
                                 || statusId == VehicleStatuses.Common.Scheduled;
 
             IsResendButtonVisible = isPayEnabled && PaymentService.GetPaymentFromCache(Order.Id).HasValue;
 		}
 
 		public void GoToSummary(){
 
 			RequestNavigate<RideSummaryViewModel> (new {
 				order = Order.ToJson(),
 				orderStatus = OrderStatusDetail.ToJson()
 			}.ToStringDictionary());
 			RequestClose (this);
 		}
 
         public void GoToCmtPairScreen()
         {
-            RequestNavigate<ConfirmCmtPairingViewModel>(new
+            RequestNavigate<CmtRideLinqConfirmPairViewModel>(new
             {
                 order = Order.ToJson(),
                 orderStatus = OrderStatusDetail.ToJson()
             }.ToStringDictionary());
             RequestClose(this);
         }
 
 
         public void GoToBookingScreen(){
             if (!_waitingToNavigateAfterTimeOut)
             {
 #if MONOTOUCH
@@ -575,19 +575,25 @@
                     }
                 });
             }
         }
 
 
        public IMvxCommand Unpair
        {
            get
            {
                return GetCommand(() =>
                {
-                   // Use the server setting
+                   var status = BookingService.GetOrderStatus(Order.Id);
+                   if (status != null)
+                   {
+                       CacheService.Set("CmtRideLinqPairState" + Order.Id.ToString(), "unpaired");
+                       _paymentService.Unpair(Order.Id);
+                       UpdatePayCancelButtons(status.IBSStatusId);
+                   }
                });
            }
        }
 	    #endregion
     }
 }
