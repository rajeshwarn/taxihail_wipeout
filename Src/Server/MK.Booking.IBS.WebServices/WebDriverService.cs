//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.17929.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="IWEBDriverbinding", Namespace="http://tempuri.org/")]
public partial class WebDriverService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetWEBDriverOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetWEBDriverGPSOperationCompleted;
    
    /// <remarks/>
    public WebDriverService()
    {
        this.Url = "http://drivelinq.dyndns-ip.com:6928/XDS_IASPI.DLL/soap/IWEBDriver";
    }
    
    /// <remarks/>
    public event GetWEBDriverCompletedEventHandler GetWEBDriverCompleted;
    
    /// <remarks/>
    public event GetWEBDriverGPSCompletedEventHandler GetWEBDriverGPSCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WEBDriverIntfIntf-IWEBDriver#GetWEBDriver", RequestNamespace="urn:WEBDriverIntfIntf-IWEBDriver", ResponseNamespace="urn:WEBDriverIntfIntf-IWEBDriver")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public TWebDriver GetWEBDriver(string Login, string Password, string DriverID) {
        object[] results = this.Invoke("GetWEBDriver", new object[] {
                    Login,
                    Password,
                    DriverID});
        return ((TWebDriver)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetWEBDriver(string Login, string Password, string DriverID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetWEBDriver", new object[] {
                    Login,
                    Password,
                    DriverID}, callback, asyncState);
    }
    
    /// <remarks/>
    public TWebDriver EndGetWEBDriver(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((TWebDriver)(results[0]));
    }
    
    /// <remarks/>
    public void GetWEBDriverAsync(string Login, string Password, string DriverID) {
        this.GetWEBDriverAsync(Login, Password, DriverID, null);
    }
    
    /// <remarks/>
    public void GetWEBDriverAsync(string Login, string Password, string DriverID, object userState) {
        if ((this.GetWEBDriverOperationCompleted == null)) {
            this.GetWEBDriverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWEBDriverOperationCompleted);
        }
        this.InvokeAsync("GetWEBDriver", new object[] {
                    Login,
                    Password,
                    DriverID}, this.GetWEBDriverOperationCompleted, userState);
    }
    
    private void OnGetWEBDriverOperationCompleted(object arg) {
        if ((this.GetWEBDriverCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetWEBDriverCompleted(this, new GetWEBDriverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:WEBDriverIntfIntf-IWEBDriver#GetWEBDriverGPS", RequestNamespace="urn:WEBDriverIntfIntf-IWEBDriver", ResponseNamespace="urn:WEBDriverIntfIntf-IWEBDriver")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public TWEBTimeStamp GetWEBDriverGPS(string Login, string Password, string DriverID, ref double Lon, ref double Lat, ref TWEBTimeStamp LastGPSUpdate) {
        object[] results = this.Invoke("GetWEBDriverGPS", new object[] {
                    Login,
                    Password,
                    DriverID,
                    Lon,
                    Lat,
                    LastGPSUpdate});
        Lon = ((double)(results[1]));
        Lat = ((double)(results[2]));
        LastGPSUpdate = ((TWEBTimeStamp)(results[3]));
        return ((TWEBTimeStamp)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetWEBDriverGPS(string Login, string Password, string DriverID, double Lon, double Lat, TWEBTimeStamp LastGPSUpdate, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetWEBDriverGPS", new object[] {
                    Login,
                    Password,
                    DriverID,
                    Lon,
                    Lat,
                    LastGPSUpdate}, callback, asyncState);
    }
    
    /// <remarks/>
    public TWEBTimeStamp EndGetWEBDriverGPS(System.IAsyncResult asyncResult, out double Lon, out double Lat, out TWEBTimeStamp LastGPSUpdate) {
        object[] results = this.EndInvoke(asyncResult);
        Lon = ((double)(results[1]));
        Lat = ((double)(results[2]));
        LastGPSUpdate = ((TWEBTimeStamp)(results[3]));
        return ((TWEBTimeStamp)(results[0]));
    }
    
    /// <remarks/>
    public void GetWEBDriverGPSAsync(string Login, string Password, string DriverID, double Lon, double Lat, TWEBTimeStamp LastGPSUpdate) {
        this.GetWEBDriverGPSAsync(Login, Password, DriverID, Lon, Lat, LastGPSUpdate, null);
    }
    
    /// <remarks/>
    public void GetWEBDriverGPSAsync(string Login, string Password, string DriverID, double Lon, double Lat, TWEBTimeStamp LastGPSUpdate, object userState) {
        if ((this.GetWEBDriverGPSOperationCompleted == null)) {
            this.GetWEBDriverGPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWEBDriverGPSOperationCompleted);
        }
        this.InvokeAsync("GetWEBDriverGPS", new object[] {
                    Login,
                    Password,
                    DriverID,
                    Lon,
                    Lat,
                    LastGPSUpdate}, this.GetWEBDriverGPSOperationCompleted, userState);
    }
    
    private void OnGetWEBDriverGPSOperationCompleted(object arg) {
        if ((this.GetWEBDriverGPSCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetWEBDriverGPSCompleted(this, new GetWEBDriverGPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:TypeDriver")]
public partial class TWebDriver {
    
    private string driverIDField;
    
    private string vehicleTypeField;
    
    private string vehicleMakeField;
    
    private string vehicleModelField;
    
    private string vehicleColorField;
    
    private string vehicleRegistrationField;
    
    private string firstNameField;
    
    private string lastNameField;
    
    private string mobilePhoneField;
    
    /// <remarks/>
    public string DriverID {
        get {
            return this.driverIDField;
        }
        set {
            this.driverIDField = value;
        }
    }
    
    /// <remarks/>
    public string VehicleType {
        get {
            return this.vehicleTypeField;
        }
        set {
            this.vehicleTypeField = value;
        }
    }
    
    /// <remarks/>
    public string VehicleMake {
        get {
            return this.vehicleMakeField;
        }
        set {
            this.vehicleMakeField = value;
        }
    }
    
    /// <remarks/>
    public string VehicleModel {
        get {
            return this.vehicleModelField;
        }
        set {
            this.vehicleModelField = value;
        }
    }
    
    /// <remarks/>
    public string VehicleColor {
        get {
            return this.vehicleColorField;
        }
        set {
            this.vehicleColorField = value;
        }
    }
    
    /// <remarks/>
    public string VehicleRegistration {
        get {
            return this.vehicleRegistrationField;
        }
        set {
            this.vehicleRegistrationField = value;
        }
    }
    
    /// <remarks/>
    public string FirstName {
        get {
            return this.firstNameField;
        }
        set {
            this.firstNameField = value;
        }
    }
    
    /// <remarks/>
    public string LastName {
        get {
            return this.lastNameField;
        }
        set {
            this.lastNameField = value;
        }
    }
    
    /// <remarks/>
    public string MobilePhone {
        get {
            return this.mobilePhoneField;
        }
        set {
            this.mobilePhoneField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetWEBDriverCompletedEventHandler(object sender, GetWEBDriverCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetWEBDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetWEBDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public TWebDriver Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((TWebDriver)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
public delegate void GetWEBDriverGPSCompletedEventHandler(object sender, GetWEBDriverGPSCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.17929")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetWEBDriverGPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetWEBDriverGPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public TWEBTimeStamp Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((TWEBTimeStamp)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public double Lon {
        get {
            this.RaiseExceptionIfNecessary();
            return ((double)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public double Lat {
        get {
            this.RaiseExceptionIfNecessary();
            return ((double)(this.results[2]));
        }
    }
    
    /// <remarks/>
    public TWEBTimeStamp LastGPSUpdate {
        get {
            this.RaiseExceptionIfNecessary();
            return ((TWEBTimeStamp)(this.results[3]));
        }
    }
}
