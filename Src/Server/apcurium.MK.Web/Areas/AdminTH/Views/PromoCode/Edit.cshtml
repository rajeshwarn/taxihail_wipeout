@using apcurium.MK.Common.Enumeration
@model apcurium.MK.Web.Areas.AdminTH.Models.PromoCode

<h4 class="table-title">Update a Promo Code</h4>
@if (@ViewBag.Error != null)
{
    <div class="alert alert-error" style="margin-top: 10px;">@ViewBag.Error @Html.ValidationSummary(true)</div>
}

@using (Html.BeginForm("Edit", "PromoCode", FormMethod.Post))
{
    @Html.AntiForgeryToken()
  
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Active)
    <div class="control-group">
        @Html.LabelFor(x => x.Name, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(x => x.Name, new { @class = "input-block-level" })
            @Html.ValidationMessageFor(x => x.Name)
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.StartDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.StartDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.StartDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
            </div>
        </div>
        <div class="control-group right-control-group">
            @Html.LabelFor(x => x.EndDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.EndDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.EndDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
            </div>
        </div>
    </div>
    <div class="control-group">
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Sunday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Sunday)) { <text> checked</text> }> 
            Sunday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Monday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Monday)) { <text> checked</text> }> 
            Monday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Tuesday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Tuesday)) { <text> checked</text> }>
            Tuesday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Wednesday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Wednesday)) { <text> checked</text> }> 
            Wednesday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Thursday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Thursday)) { <text> checked</text> }> 
            Thursday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Friday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Friday)) { <text> checked</text> }> 
            Friday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Saturday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Saturday)) { <text> checked</text> }> 
            Saturday
        </label>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.StartTime, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append bootstrap-timepicker-component" data-role='timepicker'>
                    @Html.TextBoxFor(x => x.StartTime, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.StartTime)
                    <span class="add-on"><i class="icon-time"></i></span>
                </div>
            </div>
        </div>
        <div class="control-group right-control-group">
            @Html.LabelFor(x => x.EndTime, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append bootstrap-timepicker-component" data-role='timepicker'>
                    @Html.TextBoxFor(x => x.EndTime, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.EndTime)
                    <span class="add-on"><i class="icon-time"></i></span>
                </div>
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.Label("Applies To", new { @class = "control-label" })
        <div class="controls">
            <label class="checkbox">
                @Html.CheckBoxFor(x => x.AppliesToCurrentBooking)
                @Html.DisplayNameFor(x => x.AppliesToCurrentBooking)
            </label>
            <label class="checkbox">
                @Html.CheckBoxFor(x => x.AppliesToFutureBooking)
                @Html.DisplayNameFor(x => x.AppliesToFutureBooking)
            </label>
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.DiscountValue, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.DiscountValue, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.DiscountValue)
            </div>
        </div>
        <div class="control-group right-control-group">
            <label class="radio inline">@Html.RadioButtonFor(x => x.DiscountType, PromoDiscountType.Cash) $</label>
            <label class="radio inline">@Html.RadioButtonFor(x => x.DiscountType, PromoDiscountType.Percentage) %</label>
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.MaxUsagePerUser, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.MaxUsagePerUser, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.MaxUsagePerUser)
            </div>
        </div>
        <div class="control-group right-control-group">
            @Html.LabelFor(x => x.MaxUsage, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.MaxUsage, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.MaxUsage)
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(x => x.Code, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(x => x.Code, new { @class = "input-small" })
            @Html.ValidationMessageFor(x => x.Code)
        </div>
    </div>
    
    <div class="control-group btn-right-alignment">
        <button type="submit" class="btn btn-primary span">Save</button>
        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn span" })
        @if (Model.Active)
        {
            @Html.ActionLink("Deactivate", "Deactivate", new { id = @Model.Id }, new { @class = "btn btn-danger span" })
        }
        else
        {
            @Html.ActionLink("Activate", "Activate", new { id = @Model.Id }, new { @class = "btn btn-success span" })
        }
    </div>
}

<script type="application/javascript">
    $(document).ready(function () {
        $('[data-role=datepicker]').datepicker();
        $('[data-role=timepicker]').timepicker();
    });
</script>