@using apcurium.MK.Common.Enumeration
@model apcurium.MK.Web.Areas.AdminTH.Models.PromoCode

<h4 class="table-title">Update a Promo Code</h4>
@if (@ViewBag.Error != null)
{
    <div class="alert alert-error" style="margin-top: 10px;">@ViewBag.Error @Html.ValidationSummary(true)</div>
}

@using (Html.BeginForm("Edit", "PromoCode", FormMethod.Post))
{
    @Html.AntiForgeryToken()
  
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Active)
    <div class="control-group">
        @Html.LabelFor(x => x.Name, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(x => x.Name, new { @class = "input-block-level" })
            @Html.ValidationMessageFor(x => x.Name)
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(x => x.Description, new { @class = "control-label" })
        <div class="controls">
            @Html.TextAreaFor(x => x.Description, new { @class = "input-block-level" })
            @Html.ValidationMessageFor(x => x.Description)
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group" style="width: 50%">
            @Html.LabelFor(x => x.StartDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.StartDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.StartDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
                <button type="button" class="btn" id="eraseStartDate">x</button>
            </div>
        </div>
        <div class="control-group right-control-group" style="width: 50%">
            @Html.LabelFor(x => x.EndDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.EndDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.EndDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
                <button type="button" class="btn" id="eraseEndDate">x</button>
            </div>
        </div>
    </div>
    <div class="control-group">
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Sunday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Sunday)) { <text> checked</text> }> 
            Sunday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Monday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Monday)) { <text> checked</text> }> 
            Monday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Tuesday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Tuesday)) { <text> checked</text> }>
            Tuesday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Wednesday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Wednesday)) { <text> checked</text> }> 
            Wednesday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Thursday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Thursday)) { <text> checked</text> }> 
            Thursday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Friday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Friday)) { <text> checked</text> }> 
            Friday
        </label>
        <label class="checkbox inline">
            <input type="checkbox" name='DaysOfWeek[]' value="Saturday"
                @if (Model.DaysOfWeek != null && Model.DaysOfWeek.Contains(DayOfWeek.Saturday)) { <text> checked</text> }> 
            Saturday
        </label>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group" style="width: 50%">
            @Html.LabelFor(x => x.StartTimeValue, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append bootstrap-timepicker-component">
                    @Html.TextBoxFor(x => x.StartTimeValue, new { @class = "input-small", data_role = "timepicker" })
                    @Html.ValidationMessageFor(x => x.StartTimeValue)
                    <span class="add-on"><i class="icon-time"></i></span>
                </div>
                <button type="button" class="btn" id="eraseStartTime">x</button>
            </div>
        </div>
        <div class="control-group right-control-group" style="width: 50%">
            @Html.LabelFor(x => x.EndTimeValue, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append bootstrap-timepicker-component">
                    @Html.TextBoxFor(x => x.EndTimeValue, new { @class = "input-small", data_role = "timepicker" })
                    @Html.ValidationMessageFor(x => x.EndTimeValue)
                    <span class="add-on"><i class="icon-time"></i></span>
                </div>
                <button type="button" class="btn" id="eraseEndTime">x</button>
                <span class="help-inline next-day-warning">The next day</span>
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.Label("Applies To", new { @class = "control-label" })
        <div class="controls">
            <label class="checkbox">
                @Html.CheckBoxFor(x => x.AppliesToCurrentBooking)
                @Html.DisplayNameFor(x => x.AppliesToCurrentBooking)
            </label>
            <label class="checkbox">
                @Html.CheckBoxFor(x => x.AppliesToFutureBooking)
                @Html.DisplayNameFor(x => x.AppliesToFutureBooking)
            </label>
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group" style="width: 50%">
            @Html.LabelFor(x => x.PublishedStartDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.PublishedStartDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.PublishedStartDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
                <button type="button" class="btn" id="erasePublishedStartDate">x</button>
            </div>
        </div>
        <div class="control-group right-control-group" style="width: 50%">
            @Html.LabelFor(x => x.PublishedEndDate, new { @class = "control-label" })
            <div class="controls">
                <div class="input-append date" data-role='datepicker' data-date="">
                    @Html.TextBoxFor(x => x.PublishedEndDate, new { @class = "input-small" })
                    @Html.ValidationMessageFor(x => x.PublishedEndDate)
                    <span class="add-on"><i class="icon-calendar"></i></span>
                </div>
                <button type="button" class="btn" id="erasePublishedEndDate">x</button>
            </div>
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.DiscountValue, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.DiscountValue, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.DiscountValue)
            </div>
        </div>
        <div class="control-group right-control-group">
            <label class="radio inline">@Html.RadioButtonFor(x => x.DiscountType, PromoDiscountType.Cash) $</label>
            <label class="radio inline">@Html.RadioButtonFor(x => x.DiscountType, PromoDiscountType.Percentage) %</label>
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.MaxUsagePerUser, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.MaxUsagePerUser, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.MaxUsagePerUser)
            </div>
        </div>
        <div class="control-group right-control-group">
            @Html.LabelFor(x => x.MaxUsage, new { @class = "control-label" })
            <div class="controls">
                @Html.TextBoxFor(x => x.MaxUsage, new { @class = "input-small" })
                @Html.ValidationMessageFor(x => x.MaxUsage)
            </div>
        </div>
    </div>
    <div class="control-group">
        @Html.LabelFor(x => x.Code, new { @class = "control-label" })
        <div class="controls">
            @Html.TextBoxFor(x => x.Code, new { @class = "input-small" })
            @Html.ValidationMessageFor(x => x.Code)
        </div>
    </div>
    <div class="clearfix">
        <div class="control-group left-control-group">
            @Html.LabelFor(x => x.TriggerSettings.Type, new { @class = "control-label" })
            <div class="controls">
               @Html.DropDownListFor(x => x.TriggerSettings.Type, new SelectList(Enum.GetValues(typeof(PromotionTriggerTypes))), new { @id = "triggerTypeDropDown" })
            </div>
        </div>
        <div class="control-group right-control-group" id="rideCountTriggerGroup">
            <div class="controls">
                @Html.TextBoxFor(x => x.TriggerSettings.RideCount, new { @placeholder = "Number of Rides" })
                @Html.ValidationMessageFor(x => x.TriggerSettings.RideCount)
            </div>
        </div>
        <div class="control-group right-control-group" id="amountSpentTriggerGroup">
            <div class="controls">
                @Html.TextBoxFor(x => x.TriggerSettings.AmountSpent, new { @placeholder = "Amount Spent" })
                @Html.ValidationMessageFor(x => x.TriggerSettings.AmountSpent)
            </div>
        </div>
    </div>

    <div class="control-group btn-right-alignment">
        <button type="submit" class="btn btn-primary span">Save</button>
        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn span" })
        @if (Model.Active)
        {
            @Html.ActionLink("Deactivate", "Deactivate", new { id = @Model.Id }, new { @class = "btn btn-danger span" })
        }
        else
        {
            @Html.ActionLink("Activate", "Activate", new { id = @Model.Id }, new { @class = "btn btn-success span" })
        }
    </div>
}

<script type="text/javascript">
    function _getTime($timepicker, date) {
        var timepicker = $timepicker.data('timepicker');

        if (!timepicker || timepicker.meridian === undefined) {
            return date;
        }

        var hour = timepicker.hour;

        date = _.isDate(date) ? new Date(date) : new Date();

        if (timepicker.meridian.toUpperCase() === "PM") {
            if (hour < 12) {
                hour += 12;
            }
        } else if (timepicker.meridian.toUpperCase() === "AM") {
            if (hour === 12) {
                hour = 0;
            }
        }

        date.setHours(hour);
        date.setMinutes(timepicker.minute);

        return date;
    }

    function ontimepickerchange(e) {
        var startTime = this._getTime($('#StartTimeValue')),
            endTime = this._getTime($('#EndTimeValue'));

        if (endTime <= startTime) {
            $('.next-day-warning').removeClass('hidden');
        } else {
            $('.next-day-warning').addClass('hidden');
        }
    }

    function onTriggerTypeChanged(e) {
        if ($('#triggerTypeDropDown')[0].value == "RideCount") {
            $('#amountSpentTriggerGroup').addClass('hidden');
            $('#rideCountTriggerGroup').removeClass('hidden');
        }
        else if ($('#triggerTypeDropDown')[0].value == "AmountSpent") {
            $('#amountSpentTriggerGroup').removeClass('hidden');
            $('#rideCountTriggerGroup').addClass('hidden');
        } else {
            $('#amountSpentTriggerGroup').addClass('hidden');
            $('#rideCountTriggerGroup').addClass('hidden');
        }
    }

    $(document).ready(function () {
        $('.next-day-warning').addClass('hidden');

        if ($('#triggerTypeDropDown')[0].value == "RideCount") {
            $('#amountSpentTriggerGroup').addClass('hidden');
        } else if ($('#triggerTypeDropDown')[0].value == "AmountSpent") {
            $('#rideCountTriggerGroup').addClass('hidden');
        } else {
            $('#rideCountTriggerGroup').addClass('hidden');
            $('#amountSpentTriggerGroup').addClass('hidden');
        }

        $('#triggerTypeDropDown').change(function (e) {
            onTriggerTypeChanged(e);
        });

        $('[data-role=datepicker]').datepicker();
        $('[data-role=timepicker]').timepicker({
            defaultTime: false,
            disableFocus: true
        }).on('changeTime.timepicker', function (e) {
            ontimepickerchange(e);
        });

        $('#eraseStartDate').click(function () {
            $('#StartDate').val('');
        });
        $('#eraseEndDate').click(function () {
            $('#EndDate').val('');
        });
        $('#erasePublishedStartDate').click(function () {
            $('#PublishedStartDate').val('');
        });
        $('#erasePublishedEndDate').click(function () {
            $('#PublishedEndDate').val('');
        });

        $('#eraseStartTime').click(function () {
            $('#StartTimeValue').val('');
            $('.next-day-warning').addClass('hidden');
        });
        $('#eraseEndTime').click(function () {
            $('#EndTimeValue').val('');
            $('.next-day-warning').addClass('hidden');
        });

        @if (Model.StartTime.HasValue)
        {
            <text>$('[data-role=timepicker][name=StartTimeValue]').data('timepicker').setTime('@Model.StartTimeValue');</text>
        }
        @if (Model.EndTime.HasValue)
        {
            <text>$('[data-role=timepicker][name=EndTimeValue]').data('timepicker').setTime('@Model.EndTimeValue');</text>
        }

        @if (Model.StartDate.HasValue)
        {
            var startDate = @Html.Raw(Json.Encode(Model.StartDate));
            <text>$('#StartDate').datepicker('setValue', moment(@startDate).format('L'));</text>
        }
        @if (Model.EndDate.HasValue)
        {
            var endDate = @Html.Raw(Json.Encode(Model.EndDate));
            <text>$('#EndDate').datepicker('setValue', moment(@endDate).format('L'));</text>
        }
        @if (Model.PublishedStartDate.HasValue)
        {
            var publishedStartDate = @Html.Raw(Json.Encode(Model.PublishedStartDate));
            <text>$('#PublishedStartDate').datepicker('setValue', moment(@publishedStartDate).format('L'));</text>
        }
        @if (Model.PublishedEndDate.HasValue)
        {
            var publishedEndDate = @Html.Raw(Json.Encode(Model.PublishedEndDate));
            <text>$('#PublishedEndDate').datepicker('setValue', moment(@publishedEndDate).format('L'));</text>
        }
    });
</script>