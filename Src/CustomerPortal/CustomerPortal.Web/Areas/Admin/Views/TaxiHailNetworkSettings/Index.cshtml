@model CustomerPortal.Web.Areas.Admin.Models.TaxiHailNetworkSettingsModel
    
<div id="validationPanel" class="alert-success alert" style="display: none" > </div>
    
@using (Html.BeginForm("Index", "TaxiHailNetworkSettings", FormMethod.Post, new { id = "taxiHailNetworkForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>
            @Html.DisplayNameFor(x => x.TaxiHailNetworkSettings.Region)
        </legend>
        <div class="editor-coordinate-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.Region.CoordinateStart)
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.Region.CoordinateStart.Latitude, new {id = "StartLatitude", placeholder = "Latitude"})
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.Region.CoordinateStart.Longitude, new {id = "StartLongitude", placeholder = "Longitude"})
        </div>
        <div class="validation-message">
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.Region.CoordinateStart.Latitude)
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.Region.CoordinateStart.Longitude)
        </div>
        <div class="editor-coordinate-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.Region.CoordinateEnd)
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.Region.CoordinateEnd.Latitude, new {id = "EndLatitude", placeholder = "Latitude"})
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.Region.CoordinateEnd.Longitude, new {id = "EndLongitude", placeholder = "Longitude"})
        </div>
        <div class="validation-message">
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.Region.CoordinateEnd.Latitude)
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.Region.CoordinateEnd.Longitude)
        </div>
    </fieldset>
    
    <fieldset>
        <legend>
        </legend>
        <div class="editor-fleet-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.Market)
            @*@Html.TextBoxFor(x => x.TaxiHailNetworkSettings.Market, new { id = "MarketTextBox" })*@
            @Html.DropDownListFor(x => x.TaxiHailNetworkSettings.Market, Model.AvailableMarkets, new { id = "MarketTextBox" })
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.Market)
        </div>
        <div class="editor-fleet-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.FleetId)
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.FleetId, new {id = "FleetTextBox"})
            @Html.ValidationMessageFor(x => x.TaxiHailNetworkSettings.FleetId)
        </div>
        <div class="editor-fleet-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.WhiteListedFleetIds)
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.WhiteListedFleetIds, new { id = "FleetIdWhiteList", placeholder = "Comma delimited FleetIds" })
        </div>
        <div class="editor-fleet-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.BlackListedFleetIds)
            @Html.TextBoxFor(x => x.TaxiHailNetworkSettings.BlackListedFleetIds, new { id = "FleetIdBlackist", placeholder = "Comma delimited FleetIds" })
        </div>
    </fieldset>
    
    <fieldset>
        <br/>
        <div class="editor-field">
            @Html.LabelFor(x => x.TaxiHailNetworkSettings.IsInNetwork)
            @Html.CheckBoxFor(x => x.TaxiHailNetworkSettings.IsInNetwork, new { id = "IsInNetworkCheckBox", onchange = "checkChanged(this)" })
        </div>
    </fieldset>

    @Html.Hidden("networkId", Model.TaxiHailNetworkSettings.Id, new { id="networkId" })

    <br/>
    <a href="javascript:void(0)" type="submit" class="btn btn-primary" onclick="save()">Save</a>
}
     
<div id="map-canvas"  style="height:320px;width: 600px"></div>



<script type="text/javascript">


    function displayValidationMessage(control, message, valid) {
        var html = ' <button type="button" id="validationClose" class="close" data-dismiss="alert" onclick="this.parentNode.style.display=\'none\'">&times;</button>';
        if (valid) {
            if (control.hasClass("alert-danger")) {
                control.removeClass("alert-danger");
            }
            control.addClass("alert-success");
        } else {
            if (control.hasClass("alert-success")) {
                control.removeClass("alert-success");
            }
            control.addClass("alert-danger");
        }

        control.html(html + message);
        control.css("display", "block");
        setTimeout(function () { control.css("display", "none"); }, 2000);
    }

    function save() {
        coordinatesChanged();
        var form = $('#taxiHailNetworkForm');
        var panel = $('#validationPanel');

        $.ajax({
            type: "POST",
            url: form.attr('action'),
            data: form.serialize(),
            success: function (response) {

                displayValidationMessage(panel, response.Message,response.Success);
            }
        });
    }

    var map;
    var mapRegion;

    function initialize() {
        map = new google.maps.Map(document.getElementById('map-canvas'), {
            zoom: 10,
            center: new google.maps.LatLng(45.514466, -73.846313),
            disableDefaultUI: true
        });
        coordinatesChanged();
    }

    google.maps.event.addDomListener(window, 'load', initialize);


    function coordinatesChanged() {
        var startLat = $("#StartLatitude").val();
        var startLon = $("#StartLongitude").val();
        var endLat = $("#EndLatitude").val();
        var endLon = $("#EndLongitude").val();
        var form = $('#taxiHailNetworkForm');

        if (form.valid())
        {

            var bounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(startLat, startLon),
                new google.maps.LatLng(endLat, endLon));

            if (mapRegion) {
                mapRegion.setBounds(bounds);
            } else {
                mapRegion = new google.maps.Rectangle({
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35,
                    map: map,
                    bounds: bounds
                });
            }
        
            map.fitBounds(bounds);
        }
    }


    function checkChanged(checkbox) {
        if (checkbox.checked && !$('#taxiHailNetworkForm').valid()) {
            $('#IsInNetworkCheckBox').attr('checked', false);
            alert('please enter start and end regions above');
        }
    }
</script>